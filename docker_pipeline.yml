trigger:
  branches:
    include:
    - master
  paths:
    include:
    - /
  batch: True
name: $(date:yyyyMMdd)$(rev:.r)
resources:
  repositories:
  - repository: self
    type: git
    ref: master
jobs:
- job: Phase_1
  displayName: Agent job 1
  timeoutInMinutes: 0
  pool:
    vmImage: ubuntu-20.04
  steps:
  - checkout: self
  - task: UseDotNet@2
    displayName: Use .NET Core sdk 3.1.x
    inputs:
      version: 3.1.x
  - task: DotNetCoreCLI@2
    displayName: dotnet restore
    inputs:
      command: restore
      projects: '**/*.csproj'
  - task: DotNetCoreCLI@2
    displayName: dotnet publish
    inputs:
      command: publish
      zipAfterPublish: false
      modifyOutputPath: false
      workingDirectory: CicdApp/
  - task: DotNetCoreCLI@2
    displayName: dotnet test
    continueOnError: True
    inputs:
      command: 'test'
      projects: '**/*Tests.csproj'
      arguments: '/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.cobertura.xml'
      pathToSources: '$(System.DefaultWorkingDirectory)/CicdApp/'
  - task: Bash@3
    displayName: Conditional Test Continuation
    inputs:
      filePath: CicdAppTests/test.sh
      workingDirectory: CicdAppTests
  - task: Bash@3
    displayName: SonarQube
    inputs:
      filePath: 'qube.sh'
      workingDirectory: '$(System.DefaultWorkingDirectory)'
    env:
      TOKEN: $(qubeToken) # the recommended way to map to an env variable
  - task: DockerInstaller@0
    displayName: Install Docker 17.09.0-ce
  - task: Docker@2
    displayName: Docker Build and Push Image
    inputs:
      containerRegistry: 'ContainerRegistry'
      repository: 'dcicrepo'
      command: 'buildAndPush'
      Dockerfile: '**/Dockerfile'
      tags: 'debug'
...
